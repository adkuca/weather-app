{"version":3,"sources":["adapters/openweathermap.adapter.js","components/Layout/Layout.jsx","components/City/helpers/degToCardinalDirection.js","components/City/City.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["getWeather","a","axios","get","openweathermapConfig","host","city","key","resp","name","data","weather","main","wind","getForecast","list","reduce","acc","curr","i","dt","Layout","children","propTypes","PropTypes","element","isRequired","dToCardinalDir","deg","d","Array","isArray","Math","round","City","isForecastOpen","weatherData","forecastData","openForecastHandler","weatherDataDisplay","useMemo","s","cardinalWindDir","degToCardinalDir","capitalizedDescrip","description","substr","toUpperCase","rightWeatherInfoBlock","className","feels_like","pressure","humidity","speed","forecastDataDisplay","forecastBox","map","day","capitalizedWeatherDescrip","Date","toLocaleDateString","undefined","weekday","temp","src","icon","alt","onClick","type","React","memo","getWeatherEarly","App","useState","setWeatherData","setForecastData","setForecastOpen","useEffect","wD","console","error","fD","err","useCallback","prev","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f750392.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport openweathermapConfig from '../config/openweathermap.json';\r\n\r\nexport const getWeather = async () => {\r\n  const resp = await axios.get(\r\n    `${openweathermapConfig.host}/weather?q=${openweathermapConfig.city}&appid=${openweathermapConfig.key}&units=metric`\r\n  );\r\n  return (({ name, weather, main, wind }) => ({ name, weather, main, wind }))(\r\n    resp.data\r\n  );\r\n};\r\n\r\nexport const getForecast = async () => {\r\n  const resp = await axios.get(\r\n    `${openweathermapConfig.host}/forecast?q=${openweathermapConfig.city}&appid=${openweathermapConfig.key}&units=metric`\r\n  );\r\n  return resp.data.list.reduce(\r\n    (acc, curr, i) =>\r\n      (i + 1) % 8 === 0\r\n        ? [\r\n            ...acc,\r\n            (({ dt, weather, main, wind }) => ({ dt, weather, main, wind }))(curr),\r\n          ]\r\n        : acc,\r\n    []\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Layout = ({ children }) => <>{children}</>;\r\n\r\nexport default Layout;\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","const dToCardinalDir = (deg) => {\r\n  let d = deg;\r\n  // eslint-disable-next-line\r\n  if (!(d && d !== '' && !Array.isArray(d) && +d === +d)) return '';\r\n  const dirs = [\r\n    'N',\r\n    'NNE',\r\n    'NE',\r\n    'ENE',\r\n    'E',\r\n    'ESE',\r\n    'SE',\r\n    'SSE',\r\n    'S',\r\n    'SSW',\r\n    'SW',\r\n    'WSW',\r\n    'W',\r\n    'WNW',\r\n    'NW',\r\n    'NNW',\r\n  ];\r\n  d = (d * 16) / 360;\r\n  d = Math.round(d, 0);\r\n  d = (d + 16) % 16;\r\n  return dirs[d];\r\n};\r\n\r\nexport default dToCardinalDir;\r\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport './city.scss';\nimport degToCardinalDir from './helpers/degToCardinalDirection';\n\nconst City = ({ isForecastOpen, weatherData, forecastData, openForecastHandler }) => {\n  const weatherDataDisplay = useMemo(() => {\n    const cardinalWindDir = weatherData.wind && degToCardinalDir(weatherData.wind.deg);\n    const capitalizedDescrip =\n      weatherData.weather &&\n      ((s) => s.substr(0, 1).toUpperCase() + s.substr(1))(weatherData.weather[0].description);\n\n    const rightWeatherInfoBlock = (\n      <ul className='main-info__list'>\n        <li key={1} className='main-info__item'>\n          Feels Like: {weatherData.main && Math.round(weatherData.main.feels_like)}° C\n        </li>\n        <li key={2} className='main-info__item'>\n          Pressure: {weatherData.main && weatherData.main.pressure} hPa\n        </li>\n        <li key={3} className='main-info__item'>\n          Humidity: {weatherData.main && weatherData.main.humidity}%\n        </li>\n        <li key={4} className='main-info__item'>\n          Wind: {weatherData.wind && Math.round(weatherData.wind.speed)} km/h, {cardinalWindDir}\n        </li>\n      </ul>\n    );\n\n    return { capitalizedDescrip, rightWeatherInfoBlock };\n  }, [weatherData]);\n\n  const forecastDataDisplay = useMemo(() => {\n    const forecastBoxItem = (day) => {\n      const capitalizedWeatherDescrip = ((s) => s.substr(0, 1).toUpperCase() + s.substr(1))(\n        day.weather[0].description\n      );\n      return (\n        <li key={day.dt} className='forecast-box__item'>\n          <span className='forecast-box__weekday'>\n            {new Date(day.dt * 1000).toLocaleDateString(undefined, {\n              weekday: 'short',\n            })}\n          </span>\n          <span className='forecast-box__temp'>{Math.round(day.main.temp)}°</span>\n          <span className='forecast-box__description'>{capitalizedWeatherDescrip}</span>\n        </li>\n      );\n    };\n\n    const forecastBox = (\n      <div className='forecast-box'>\n        <h2 className='forecast-box__title'>5 Day forecast</h2>\n        <ul className='forecast-box__list'>{forecastData.map(forecastBoxItem)}</ul>\n      </div>\n    );\n\n    return { forecastBox };\n  }, [forecastData]);\n\n  return (\n    <div className='container'>\n      <div className='heading'>\n        <h2 className='heading__city'>\n          {weatherData.name}, {weatherDataDisplay.capitalizedDescrip}\n        </h2>\n        <div className='heading__img-wrapper'>\n          <img\n            className='heading__img'\n            src={\n              weatherData.weather &&\n              `http://openweathermap.org/img/w/${weatherData.weather[0].icon}.png`\n            }\n            alt=''\n          />\n        </div>\n      </div>\n      <div className='main-info'>\n        <h3 className='main-info__temp'>\n          {weatherData.main && Math.round(weatherData.main.temp)}°\n        </h3>\n        {weatherDataDisplay.rightWeatherInfoBlock}\n      </div>\n      <button className='open-forecast-btn' onClick={openForecastHandler} type='button'>\n        {isForecastOpen ? '-' : '+'}\n      </button>\n      {isForecastOpen && forecastDataDisplay.forecastBox}\n    </div>\n  );\n};\n\nexport default React.memo(City);\n\nCity.propTypes = {\n  isForecastOpen: PropTypes.bool.isRequired,\n  weatherData: PropTypes.PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    main: PropTypes.shape({\n      name: PropTypes.number,\n      temp: PropTypes.number,\n      feels_like: PropTypes.number,\n      pressure: PropTypes.number,\n      humidity: PropTypes.number,\n    }),\n    weather: PropTypes.arrayOf(\n      PropTypes.shape({\n        description: PropTypes.string,\n        icon: PropTypes.string,\n      })\n    ),\n    wind: PropTypes.shape({\n      speed: PropTypes.number,\n      deg: PropTypes.number,\n    }),\n  }).isRequired,\n  forecastData: PropTypes.PropTypes.arrayOf(\n    PropTypes.shape({\n      dt: PropTypes.number.isRequired,\n      main: PropTypes.shape({\n        temp: PropTypes.number,\n      }),\n      weather: PropTypes.arrayOf(\n        PropTypes.shape({\n          description: PropTypes.string,\n        })\n      ),\n    })\n  ).isRequired,\n  openForecastHandler: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './app.scss';\nimport { getWeather, getForecast } from './adapters/openweathermap.adapter';\nimport Layout from './components/Layout/Layout';\nimport City from './components/City/City';\n\nconst getWeatherEarly = getWeather();\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState({});\n  const [forecastData, setForecastData] = useState([]);\n  const [isForecastOpen, setForecastOpen] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const wD = await getWeatherEarly;\n        setWeatherData(wD);\n      } catch (err) {\n        // eslint-disable-next-line\n        console.error('Failed to fetch weather data.', err);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (isForecastOpen) {\n      try {\n        (async () => {\n          const fD = await getForecast();\n          setForecastData(fD);\n        })();\n      } catch (err) {\n        // eslint-disable-next-line\n        console.error('Failed to fetch forecast data.', err);\n      }\n    }\n  }, [isForecastOpen]);\n\n  const openForecastHandler = useCallback(() => setForecastOpen((prev) => !prev), []);\n\n  return (\n    <div className='App'>\n      <Layout>\n        {JSON.stringify(weatherData) === '{}' ? (\n          <h1>Loading...</h1>\n        ) : (\n          <City\n            isForecastOpen={isForecastOpen}\n            weatherData={weatherData}\n            forecastData={forecastData}\n            openForecastHandler={openForecastHandler}\n          />\n        )}\n      </Layout>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}